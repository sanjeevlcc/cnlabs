



Database (15) + Information System (10)
              • Concept of Database and Models
              • Relational Database, Relational Algebra and Normalization.
              • Basic SQL
              • Concept of Distributed Database
              • File and Index
              • Transactional Processing, concurrency control and recovery
              • Software Development Life Cycle
              • Requirement Analysis
              • Software Testing.






Database (15 marks)
------------------------------
Concept of Database and Models
    Definition and importance of databases
    Types of database models (Hierarchical, Network, Relational, and Object-oriented)



Relational Database, Relational Algebra, and Normalization
    Relational Database concepts (tables, attributes, keys)
    Relational Algebra operations (Selection, Projection, Union, Join, etc.)
    Normalization: Forms (1NF, 2NF, 3NF, BCNF) and their benefits
    


Basic SQL
    Data Definition Language (DDL)
    Data Manipulation Language (DML)
    SQL queries (SELECT, INSERT, UPDATE, DELETE)
    



Concept of Distributed Database
    Features and challenges of distributed databases
    Distributed database architecture
    


File and Index
    File organization (heap, sequential, indexed)
    Types of indexes (primary, secondary, clustered)
    



Transactional Processing, Concurrency Control, and Recovery
      ACID properties
      Concurrency control mechanisms (locks, timestamps)
      Recovery methods (log-based recovery, shadow paging)
      



Information System (10 marks)
------------------------------
Software Development Life Cycle (SDLC)
      Phases: Planning, Analysis, Design, Implementation, Maintenance



Requirement Analysis
      Gathering requirements
      Tools for analysis (Use Cases, Data Flow Diagrams, ER Diagrams)



Software Testing
      Testing levels: Unit, Integration, System, Acceptance
      Testing types: Functional vs. Non-functional testing
      




-----------------------------------------------------------------------------


Concept of Database and Models
------------------------------------
      A database is a structured collection of data that supports
      efficient storage, retrieval, and management.
      
      
      
      
      Database Models define how data is organized:
      ---------------------------------------------
                Hierarchical Model: 
                    Data is organized in a tree structure.
                    Example Scenario: File directories in an operating system.
                
                
                Network Model:
                    Data is represented as a graph, with multiple 
                    parent-child relationships.
                    Example Scenario: Airline routes showing multiple connections.
                
                Relational Model:
                    Data is stored in tables with rows and 
                    columns.
                    Example Scenario: A library database with "Books" and
                    "Borrowers" tables.
                
      
      
      






Relational Database, Relational Algebra, and Normalization
----------------------------------------------------------
          Relational Database stores data in tables with 
          relationships between them. 
          
          Example: A "Customers" table (CustomerID, Name) linked 
          to "Orders" (OrderID, CustomerID).
          
          Relational Algebra operations:
          
                Selection (σ): Filters rows; e.g., Grade > 90.
                Projection (π): Select specific columns; e.g., Name.
                Join (⨝): Combine tables on a common key.
          
          
          
          Normalization minimizes redundancy:
          
                1NF: Atomic columns; no duplicate rows.
                2NF: Remove partial dependencies.
                3NF: Eliminate transitive dependencies.
                
          
          
          Case Scenario
          ----------------
          A retail chain tracks sales. Database Model: Relational model 
          with "Products" and "Sales" tables. Using Relational Algebra, 
          queries retrieve products with high sales (σ Sales > 1000).
          Normalization ensures no redundant product information.
          
          
                  Q&A
                  Q1: Why use the relational model?
                  A: It ensures data is organized, structured, and easily queried.
                  
                  Q2: How does normalization help?
                  A: It reduces redundancy, ensuring consistency.
                  
      











Basic SQL
-----------
SQL (Structured Query Language) is used to interact with
relational databases. 

It consists of various commands 
categorized into:
---------------------------------
    Data Definition Language (DDL): Defines the structure of the database.
    
    Data Manipulation Language (DML): Handles data operations like insertion 
                                  and retrieval.
    
    Data Control Language (DCL): Manages access control.






Key Commands with Examples
----------------------------
DDL Commands:
        
        CREATE: Creates a new table.
        
        
              CREATE TABLE Students (
                  ID INT PRIMARY KEY,
                  Name VARCHAR(50),
                  Grade FLOAT
              );
        
        
        
        ALTER: Modifies a table.
        
        
              ALTER TABLE Students ADD Age INT;
        
        
        
        
        DROP: Deletes a table.
        
              DROP TABLE Students;



DML Commands:
    
    INSERT: Adds data to a table.
    
            INSERT INTO Students (ID, Name, Grade) VALUES (1, 'Alice', 85.5);
    
    
    
    
    
    SELECT: Retrieves data.
    
    
                SELECT Name, Grade FROM Students WHERE Grade > 80;
    
    
    
    
    
    
    UPDATE: Modifies existing data.
    
    
            UPDATE Students SET Grade = 90 WHERE ID = 1;
    
    
    
    
    
    DELETE: Removes data.
    
    
            DELETE FROM Students WHERE ID = 1;
    




Example Scenario
A library database has a "Books" table 
(BookID, Title, Author, Copies). The librarian uses:

      INSERT to add new books,
      SELECT to find all books by a specific author,
      UPDATE to adjust the number of copies, and
      DELETE to remove outdated records.




Q&A
    Q1: What does the SELECT statement do?
    A: It retrieves specific data from a table based on conditions.
    
    Q2: How is ALTER different from UPDATE?
    A: ALTER changes the table structure, while UPDATE modifies data within the table.


















Concept of Distributed Database
+++++++++++++++++++++++++++++++++++


      A Distributed Database (DDB) is a collection of interrelated data spread
      across multiple physical locations, managed as a single logical system. 
      These databases improve availability, performance, and fault tolerance.
      Data distribution can be fragmented (split into subsets), replicated 
      (duplicated across sites), or a combination of both.
      
      
      
      Features of Distributed Databases
      ---------------------------------
            Data Distribution: 
                Data resides in different locations, improving performance
                and fault tolerance.
            
            Transparency: 
                  Users interact as if the data is stored centrally.
            
                      Location Transparency: Users need not know where the data
                                              is stored.
                      Replication Transparency: Users don’t manage replicated copies.
            
            Fault Tolerance: 
              Partial failures (e.g., one site down) do not disrupt the entire system.
      
      
            Scalability:
                Additional nodes can be easily added to the system.
            
      
      
      
      
      
      
      Example Scenario
      ------------------------
      A multinational company maintains a distributed
      database for its operations:
      
          Data about US customers is stored in a US server.
          
          European customer data resides in a server in Europe.
          If a query about global sales is issued, the system aggregates
          data from all locations transparently.
      
      
      
      
      Case Scenario
      -------------
      E-commerce Platform: A distributed database stores:
            
                User data in regional servers for fast access.
                Product inventory replicated globally for reliability.
            
            
            If a server in Asia fails, data from other servers ensures
            uninterrupted access. Queries like "Top-selling products globally" 
            integrate data seamlessly.
            
            
            
            Q&A
                Q1: What is the benefit of replication in distributed databases?
                A: It ensures high availability and fault tolerance by maintaining 
                copies of data across locations.
                
                Q2: How does a distributed database handle partial failures?
                A: It uses fault-tolerance mechanisms to continue operating, relying 
                on operational sites.
          

















File and Index
++++++++++++++++++      

In a database, data is stored in files, and indexing is a technique
used to speed up query processing. Both concepts play a crucial 
role in improving data retrieval performance.




File Organization
---------------------
Data can be stored in different file organizations, depending
on the access method and application needs:
    
    Heap Files:
        Data is stored in an unordered manner.
        Use Case: Quick insertions but slow retrieval.
        Example: A table that allows inserting new records without any specific order.
    
    
    Sequential Files:
        Data is stored in a sorted manner based on a key.
        Use Case: Efficient for range queries but slow for insertions and deletions.
        Example: A log of transactions sorted by date.
    
    
    
    Indexed Files:
        Data is stored with an index for fast access.
        Use Case: Efficient for both retrieval and insertion.
        Example: A product catalog with a primary index on product ID.
    




Indexing
--------------
Indexing is a technique that improves query performance by creating
a data structure (like a B-tree) that helps quickly locate records.

      Primary Index:
          Created on the primary key.
          Example: An index on EmployeeID in an employee table.
      
      
      Secondary Index:
          Created on non-primary keys for faster lookups.
          Example: An index on DepartmentName in an employee table for quick search.
      
      Clustered Index:
          Organizes the data file itself according to the indexed columns.
          Example: Data sorted by EmployeeID.
      
      
      
      Non-Clustered Index:
          A separate index structure that points to data locations.
          Example: Indexes on Salary for faster search without changing data order.






Example Scenario
      Consider a library database with a Books table:
      
      File: Books are stored in a heap file.
      Index: A non-clustered index is created on ISBN for fast 
          lookup when searching by book number.






Q&A
          Q1: What is the main advantage of indexing?
          A: Indexing speeds up data retrieval by providing quick access paths to
             the data.
          
          Q2: How do sequential files differ from heap files?
          A: Sequential files store data in sorted order, making them efficient
             for range queries, while heap files store data in an unordered fashion.






