
Full Marks:                                                                100
Numbers of Questions (Objective Based) no negative marking system:         100
Durations of Entrance Examination:                                         2 Hours
Courses Cover:                                                             100%





Programming Concept and Programming Logic (25)
            • Variables and constraint.
            • Condition and loop concept.
            • Array, structure and pointer.
            • Stack, Ques and List.
            • Sort, search and Tree. 



Database (15) + Information System (10)
              • Concept of Database and Models
              • Relational Database, Relational Algebra and Normalization.
              • Basic SQL
              • Concept of Distributed Database
              • File and Index
              • Transactional Processing, concurrency control and recovery
              • Software Development Life Cycle
              • Requirement Analysis
              • Software Testing.



Computer Network and Architecture (25)
                  • Communication Media and Network Architecture and OSI and TCP/IP
                  • Network Security and IPv4
                  • Modulation Techniques and Switching Techniques
                  • Boolean Algebra and Fundamental of processor
                  • Memory Organization and I/O Structure 




Concept of Research (25)
                (Research Methodology)
                • Foundation of Research and Problem Identification & Formulation
                • Research Design/Architecture
                • Qualitative and Quantitative Research
                • Data Analysis and Interpretation of Data and Proposal Writing
                • Research Tools















****************************************************************************
****************************************************************************
****************************************************************************
Programming Concept and Programming Logic (25)
            • Variables and constraint.
            • Condition and loop concept.
            • Array, structure and pointer.
            • Stack, Ques and List.
            • Sort, search and Tree. 





Programming Concept and Programming Logic
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1. Variables and Constraints
+++++++++++++++++++++++++++
    Variables: Variables are named storage locations in memory used 
    to hold data values that can be changed during program execution. 
    Variables have a type (e.g., int, float, string) that defines 
    the kind of data they store.
    
          Example: int age = 25;
    
    Constraints: Constraints are conditions or rules that variables 
    must adhere to. They can be logical or mathematical restrictions 
    imposed on the data.
    
        Example: Age should always be greater than zero: if (age > 0)



2. Condition and Loop Concepts
+++++++++++++++++++++++++++++++++++
      Conditions: Conditions are logical statements used to control
      the flow of a program. They evaluate to either true or false.
      
          Example: if (x > 0) { printf("Positive number"); }




      Loops: Loops allow repeated execution of a block of code until 
      a specified condition is met.
      
      Types of Loops:
      ---------------
                For Loop: Iterates a fixed number of times.
                
                      Example: for (int i = 0; i < 10; i++) { printf("%d", i); }
                
                While Loop: Executes as long as the condition is true.
                
                      Example: while (x > 0) { x--; }
                
                Do-While Loop: Executes at least once, then checks the condition.
                
                      Example: do { x--; } while (x > 0);




3. Array, Structure, and Pointer
+++++++++++++++++++++++++++++++++++++++++++
            Array: A collection of elements of the same type, stored
            in contiguous memory locations.
            
                  Example: int arr[5] = {1, 2, 3, 4, 5};
            
            Structure: A user-defined data type that groups variables 
            of different types under one name.
            
                  Example:
                  
                  struct Person {
                      char name[50];
                      int age;
                      float salary;
                  };
            
            
            Pointer: A variable that stores the memory address of another variable.
            
                    Example: int *ptr = &x;

4. Stack, Queue, and List
++++++++++++++++++++++++++++++++
            Stack: A linear data structure that follows 
            the Last In, First Out (LIFO) principle.
            
                  Operations: push, pop, peek
            
                  Example Use: Function call management in recursion.
            
            
            
            
            Queue: A linear data structure that follows
            the First In, First Out (FIFO) principle.
            
                  Operations: enqueue, dequeue
                  
                  Example Use: Task scheduling.
            
            
            
            List: A collection of elements that can be dynamic
            in size and may allow duplicate values.
            
                  Example: Linked List (singly or doubly linked).




5. Sort, Search, and Tree
++++++++++++++++++++++++++++++++
        Sorting: Organizing data in a specific order (ascending or descending).
                
                Common Algorithms:
                
                    Bubble Sort
                    
                    Quick Sort
                    
                    Merge Sort
        
        Example: Sorting an array of integers.
        
        Searching: Finding the location of an element in a dataset.
        
                Common Algorithms:
                
                    Linear Search
                    
                    Binary Search
        
                Example: Searching for a name in a list.
        
        
        
        Tree: A hierarchical data structure with nodes connected by edges.
        
                Types: Binary Tree, Binary Search Tree (BST), AVL Tree.
                
                Example: Directory structure in an operating system.
                



//////////////////////////////////////////////////////////////////////////////////////


Programming Concept
++++++++++++++++++++++++
The concept of programming revolves around the principles, 
tools, and techniques used to write computer programs. 

It includes:

            1. Variables and Data Types
            --------------------------
            Variables: Containers to store data.
                        Example: int age = 25;

            Data Types: Define the kind of data variables can hold.
                        Primitive types: int, float, char, bool.
                        Derived types: Arrays, pointers, structures.
                        
            
            
            2. Input and Output (I/O)
            --------------------------
            Input: Getting data from the user or external sources.
            Example:
         
                        scanf("%d", &age);
            Output: Displaying results or sending data to an output device.

            Example:
         
                        printf("Your age is %d", age);
            
            
            
            3. Operators
            --------------------------
            Used to perform operations on variables and values.

                        Arithmetic: +, -, *, /, %
                        Relational: ==, !=, <, >
                        Logical: &&, ||, !
                        Bitwise: &, |, ^, ~
            
            
            
            4. Control Structures
            --------------------------
            Guide the flow of program execution.
                        Conditional Statements:
                                    if, else, switch.
                        Loops:
                                    for, while, do-while.
                        
            
            
            5. Functions
            --------------------------
            Modular blocks of reusable code.
            Example:
                        int add(int a, int b) {
                            return a + b;
                        }
            
            
            6. Data Structures
            --------------------------
            Tools to organize and manipulate data.

            Arrays, Lists, Stacks, Queues, Trees, Graphs.
            


            7. File Handling
            --------------------------
            Reading from and writing to files.
            Example in C:
            
                        FILE *file = fopen("data.txt", "r");




Programming Logic

++++++++++++++++++++++++
Programming logic refers to the thinking and 
reasoning behind solving problems using programming.
It involves breaking down problems into smaller 
steps and implementing efficient solutions.

Key Components of Programming Logic:

            Understanding the Problem:
            ----------------------------
            Identify input, process, and output requirements.
            
            
            
            Algorithm Design:
            ----------------------------
            A step-by-step procedure to solve a problem.
            Example (Find the largest of three numbers):
           
                        Step 1: Start
                        Step 2: Input a, b, c
                        Step 3: If (a > b) and (a > c), print a
                        Step 4: Else if (b > a) and (b > c), print b
                        Step 5: Else, print c
                        Step 6: End
            
            
            
            Flowchart:
            ----------------------------
            A visual representation of logic using
            diagrams (symbols like ovals, diamonds, and rectangles).
            
            
            Control Flow:
            ----------------------------
            Managing execution paths using conditions and loops.
            
            
            
            Error Handling:
            ----------------------------
            Anticipating and managing errors in code.

            Example:
            
            if (file == NULL) {
                printf("File not found!");
            }


            Optimization:
            ----------------------------
            Writing efficient code in terms of execution time and memory usage.






Examples of Programming Concept and Logic
-------------------------------------------


Example 1: Simple Calculator
-------------------------------       
            #include <stdio.h>
            
            int main() {
                int num1, num2, choice;
                printf("Enter two numbers: ");
                scanf("%d %d", &num1, &num2);
            
                printf("Choose an operation: 1.Add 2.Subtract 3.Multiply 4.Divide\n");
                scanf("%d", &choice);
            
                switch (choice) {
                    case 1: printf("Sum: %d\n", num1 + num2); break;
                    case 2: printf("Difference: %d\n", num1 - num2); break;
                    case 3: printf("Product: %d\n", num1 * num2); break;
                    case 4:
                        if (num2 != 0) {
                            printf("Quotient: %f\n", (float)num1 / num2);
                        } else {
                            printf("Division by zero is not allowed\n");
                        }
                        break;
                    default: printf("Invalid choice\n");
                }
            
                return 0;
            }






Example 2: Factorial of a Number Using Recursion
------------------------------------------------


#include <stdio.h>

int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    return n * factorial(n - 1);
}

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);

    printf("Factorial of %d is %d\n", num, factorial(num));
    return 0;
}



Key Steps to Develop Programming Logic
-------------------------------------
            Practice Basic Problems:
                        Start with simple problems 
                        (e.g., swapping two numbers, finding the sum of an array).
                        
            
            Learn Algorithms:
                        Study common algorithms (sorting, searching, recursion).
            
            
            Debugging:
                        Understand and fix errors systematically.
            
            
            Code Optimization:
                        Learn to write efficient and clean code.
            
            
            Work on Projects:
                        Real-world projects improve logical thinking.
            


****************************************************************************
****************************************************************************
****************************************************************************











****************************************************************************
****************************************************************************
****************************************************************************
Database (15) + Information System (10)
              • Concept of Database and Models
              • Relational Database, Relational Algebra and Normalization.
              • Basic SQL
              • Concept of Distributed Database
              • File and Index
              • Transactional Processing, concurrency control and recovery
              • Software Development Life Cycle
              • Requirement Analysis
              • Software Testing.








****************************************************************************
****************************************************************************
****************************************************************************














****************************************************************************
****************************************************************************
****************************************************************************
Computer Network and Architecture (25)
                  • Communication Media and Network Architecture and OSI and TCP/IP
                  • Network Security and IPv4
                  • Modulation Techniques and Switching Techniques
                  • Boolean Algebra and Fundamental of processor
                  • Memory Organization and I/O Structure 

****************************************************************************
****************************************************************************
****************************************************************************












****************************************************************************
****************************************************************************
****************************************************************************
Concept of Research (25)
                (Research Methodology)
                • Foundation of Research and Problem Identification & Formulation
                • Research Design/Architecture
                • Qualitative and Quantitative Research
                • Data Analysis and Interpretation of Data and Proposal Writing
                • Research Tools


****************************************************************************
****************************************************************************
****************************************************************************
