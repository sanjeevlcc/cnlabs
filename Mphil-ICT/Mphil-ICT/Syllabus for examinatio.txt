
Full Marks:                                                                100
Numbers of Questions (Objective Based) no negative marking system:         100
Durations of Entrance Examination:                                         2 Hours
Courses Cover:                                                             100%





Programming Concept and Programming Logic (25)
            • Variables and constraint.
            • Condition and loop concept.
            • Array, structure and pointer.
            • Stack, Ques and List.
            • Sort, search and Tree. 



Database (15) + Information System (10)
              • Concept of Database and Models
              • Relational Database, Relational Algebra and Normalization.
              • Basic SQL
              • Concept of Distributed Database
              • File and Index
              • Transactional Processing, concurrency control and recovery
              • Software Development Life Cycle
              • Requirement Analysis
              • Software Testing.



Computer Network and Architecture (25)
                  • Communication Media and Network Architecture and OSI and TCP/IP
                  • Network Security and IPv4
                  • Modulation Techniques and Switching Techniques
                  • Boolean Algebra and Fundamental of processor
                  • Memory Organization and I/O Structure 




Concept of Research (25)
                (Research Methodology)
                • Foundation of Research and Problem Identification & Formulation
                • Research Design/Architecture
                • Qualitative and Quantitative Research
                • Data Analysis and Interpretation of Data and Proposal Writing
                • Research Tools















****************************************************************************
****************************************************************************
****************************************************************************
Programming Concept and Programming Logic (25)
            • Variables and constraint.
            • Condition and loop concept.
            • Array, structure and pointer.
            • Stack, Ques and List.
            • Sort, search and Tree. 





Programming Concept and Programming Logic
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1. Variables and Constraints
+++++++++++++++++++++++++++
    Variables: Variables are named storage locations in memory used 
    to hold data values that can be changed during program execution. 
    Variables have a type (e.g., int, float, string) that defines 
    the kind of data they store.
    
          Example: int age = 25;
    
    Constraints: Constraints are conditions or rules that variables 
    must adhere to. They can be logical or mathematical restrictions 
    imposed on the data.
    
        Example: Age should always be greater than zero: if (age > 0)



2. Condition and Loop Concepts
+++++++++++++++++++++++++++++++++++
      Conditions: Conditions are logical statements used to control
      the flow of a program. They evaluate to either true or false.
      
          Example: if (x > 0) { printf("Positive number"); }




      Loops: Loops allow repeated execution of a block of code until 
      a specified condition is met.
      
      Types of Loops:
      ---------------
                For Loop: Iterates a fixed number of times.
                
                      Example: for (int i = 0; i < 10; i++) { printf("%d", i); }
                
                While Loop: Executes as long as the condition is true.
                
                      Example: while (x > 0) { x--; }
                
                Do-While Loop: Executes at least once, then checks the condition.
                
                      Example: do { x--; } while (x > 0);




3. Array, Structure, and Pointer
+++++++++++++++++++++++++++++++++++++++++++
            Array: A collection of elements of the same type, stored
            in contiguous memory locations.
            
                  Example: int arr[5] = {1, 2, 3, 4, 5};
            
            Structure: A user-defined data type that groups variables 
            of different types under one name.
            
                  Example:
                  
                  struct Person {
                      char name[50];
                      int age;
                      float salary;
                  };
            
            
            Pointer: A variable that stores the memory address of another variable.
            
                    Example: int *ptr = &x;

4. Stack, Queue, and List
++++++++++++++++++++++++++++++++
            Stack: A linear data structure that follows 
            the Last In, First Out (LIFO) principle.
            
                  Operations: push, pop, peek
            
                  Example Use: Function call management in recursion.
            
            
            
            
            Queue: A linear data structure that follows
            the First In, First Out (FIFO) principle.
            
                  Operations: enqueue, dequeue
                  
                  Example Use: Task scheduling.
            
            
            
            List: A collection of elements that can be dynamic
            in size and may allow duplicate values.
            
                  Example: Linked List (singly or doubly linked).




5. Sort, Search, and Tree
++++++++++++++++++++++++++++++++
        Sorting: Organizing data in a specific order (ascending or descending).
                
                Common Algorithms:
                
                    Bubble Sort
                    
                    Quick Sort
                    
                    Merge Sort
        
        Example: Sorting an array of integers.
        
        Searching: Finding the location of an element in a dataset.
        
                Common Algorithms:
                
                    Linear Search
                    
                    Binary Search
        
                Example: Searching for a name in a list.
        
        
        
        Tree: A hierarchical data structure with nodes connected by edges.
        
                Types: Binary Tree, Binary Search Tree (BST), AVL Tree.
                
                Example: Directory structure in an operating system.
                



//////////////////////////////////////////////////////////////////////////////////////


Programming Concept
++++++++++++++++++++++++
The concept of programming revolves around the principles, 
tools, and techniques used to write computer programs. 

It includes:

            1. Variables and Data Types
            --------------------------
            Variables: Containers to store data.
                        Example: int age = 25;

            Data Types: Define the kind of data variables can hold.
                        Primitive types: int, float, char, bool.
                        Derived types: Arrays, pointers, structures.
                        
            
            
            2. Input and Output (I/O)
            --------------------------
            Input: Getting data from the user or external sources.
            Example:
         
                        scanf("%d", &age);
            Output: Displaying results or sending data to an output device.

            Example:
         
                        printf("Your age is %d", age);
            
            
            
            3. Operators
            --------------------------
            Used to perform operations on variables and values.

                        Arithmetic: +, -, *, /, %
                        Relational: ==, !=, <, >
                        Logical: &&, ||, !
                        Bitwise: &, |, ^, ~
            
            
            
            4. Control Structures
            --------------------------
            Guide the flow of program execution.
                        Conditional Statements:
                                    if, else, switch.
                        Loops:
                                    for, while, do-while.
                        
            
            
            5. Functions
            --------------------------
            Modular blocks of reusable code.
            Example:
                        int add(int a, int b) {
                            return a + b;
                        }
            
            
            6. Data Structures
            --------------------------
            Tools to organize and manipulate data.

            Arrays, Lists, Stacks, Queues, Trees, Graphs.
            


            7. File Handling
            --------------------------
            Reading from and writing to files.
            Example in C:
            
                        FILE *file = fopen("data.txt", "r");




Programming Logic

++++++++++++++++++++++++
Programming logic refers to the thinking and 
reasoning behind solving problems using programming.
It involves breaking down problems into smaller 
steps and implementing efficient solutions.

Key Components of Programming Logic:

            Understanding the Problem:
            ----------------------------
            Identify input, process, and output requirements.
            
            
            
            Algorithm Design:
            ----------------------------
            A step-by-step procedure to solve a problem.
            Example (Find the largest of three numbers):
           
                        Step 1: Start
                        Step 2: Input a, b, c
                        Step 3: If (a > b) and (a > c), print a
                        Step 4: Else if (b > a) and (b > c), print b
                        Step 5: Else, print c
                        Step 6: End
            
            
            
            Flowchart:
            ----------------------------
            A visual representation of logic using
            diagrams (symbols like ovals, diamonds, and rectangles).
            
            
            Control Flow:
            ----------------------------
            Managing execution paths using conditions and loops.
            
            
            
            Error Handling:
            ----------------------------
            Anticipating and managing errors in code.

            Example:
            
            if (file == NULL) {
                printf("File not found!");
            }


            Optimization:
            ----------------------------
            Writing efficient code in terms of execution time and memory usage.






Examples of Programming Concept and Logic
-------------------------------------------


Example 1: Simple Calculator
-------------------------------       
            #include <stdio.h>
            
            int main() {
                int num1, num2, choice;
                printf("Enter two numbers: ");
                scanf("%d %d", &num1, &num2);
            
                printf("Choose an operation: 1.Add 2.Subtract 3.Multiply 4.Divide\n");
                scanf("%d", &choice);
            
                switch (choice) {
                    case 1: printf("Sum: %d\n", num1 + num2); break;
                    case 2: printf("Difference: %d\n", num1 - num2); break;
                    case 3: printf("Product: %d\n", num1 * num2); break;
                    case 4:
                        if (num2 != 0) {
                            printf("Quotient: %f\n", (float)num1 / num2);
                        } else {
                            printf("Division by zero is not allowed\n");
                        }
                        break;
                    default: printf("Invalid choice\n");
                }
            
                return 0;
            }






Example 2: Factorial of a Number Using Recursion
------------------------------------------------


#include <stdio.h>

int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    return n * factorial(n - 1);
}

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);

    printf("Factorial of %d is %d\n", num, factorial(num));
    return 0;
}



Key Steps to Develop Programming Logic
-------------------------------------
            Practice Basic Problems:
                        Start with simple problems 
                        (e.g., swapping two numbers, finding the sum of an array).
                        
            
            Learn Algorithms:
                        Study common algorithms (sorting, searching, recursion).
            
            
            Debugging:
                        Understand and fix errors systematically.
            
            
            Code Optimization:
                        Learn to write efficient and clean code.
            
            
            Work on Projects:
                        Real-world projects improve logical thinking.
            
















Condition and loop concept.
+++++++++++++++++++++++++++++++++

            1. Condition Concept
            ---------------------------
            Conditions allow a program to make decisions and 
            execute specific blocks of code based on whether a 
            condition is true or false.
            
            Key Conditional Statements:
            ---------------------------
            
            if Statement:
            ---------------------------
            
            Executes a block of code if the condition is true.


                        Syntax:
                        
                                    if (condition) {
                                        // Code to execute if condition is true
                                    }
            
            
                        Example:
                     
                                    int age = 20;
                                    if (age >= 18) {
                                        printf("Eligible to vote\n");
                                    }
                        
            
            
            if-else Statement:
            ---------------------------
            Executes one block of code if the condition is true, 
            otherwise another block is executed.



                        Syntax:
                      
                                    if (condition) {
                                        // Code if condition is true
                                    } else {
                                        // Code if condition is false
                                    }
            
            
                        Example:
                     
                                    int number = -5;
                                    if (number >= 0) {
                                        printf("Positive number\n");
                                    } else {
                                        printf("Negative number\n");
                                    }
                                    
                        
            
            else if Ladder:
            ---------------------------
            Used to check multiple conditions.

                        Syntax:
                                
                                    if (condition1) {
                                        // Code if condition1 is true
                                    } else if (condition2) {
                                        // Code if condition2 is true
                                    } else {
                                        // Code if none of the conditions are true
                                    }
            
            
                        Example:
                       
            
                                    int marks = 85;
                                    if (marks >= 90) {
                                        printf("Grade: A\n");
                                    } else if (marks >= 75) {
                                        printf("Grade: B\n");
                                    } else {
                                        printf("Grade: C\n");
                                    }
                                    
                        
            
            switch Statement:
            ---------------------------
            Used for decision-making based on specific values.


            Syntax:
          
                        switch (variable) {
                            case value1:
                                // Code for case 1
                                break;
                            case value2:
                                // Code for case 2
                                break;
                            default:
                                // Code if no cases match
                        }


            Example:
       

                        int day = 3;
                        switch (day) {
                            case 1: printf("Monday\n"); break;
                            case 2: printf("Tuesday\n"); break;
                            case 3: printf("Wednesday\n"); break;
                            default: printf("Invalid day\n");
                        }
                        
            
            
            
            
            
            2. Loop Concept
            ---------------------------
            Loops are used to execute a block of code 
            repeatedly based on a condition.


            Types of Loops:
            ---------------------------
            
            
            1. for Loop:
            ---------------------------
            Used when the number of iterations is known.


            Syntax:
          

                        for (initialization; condition; increment/decrement) {
                            // Code to execute
                        }


            Example:
           

                        for (int i = 1; i <= 5; i++) {
                            printf("%d ", i);
                        }
                        Output: 1 2 3 4 5
                        
                        
            
            
            
            2. while Loop:
            ---------------------------
            Used when the number of iterations is not known
            beforehand, and it depends on a condition.
           

            Syntax:
           
                        while (condition) {
                            // Code to execute
                        }


            Example:
     

                        int i = 1;
                        while (i <= 5) {
                            printf("%d ", i);
                            i++;
                        }
                        Output: 1 2 3 4 5
                        
                        
            
            3. do-while Loop:
            ---------------------------
            Similar to the while loop, but ensures the code block
            executes at least once, even if the condition is false.


            Syntax:
        
            
                        do {
                            // Code to execute
                        } while (condition);


            Example:
           
            
                        int i = 1;
                        do {
                            printf("%d ", i);
                            i++;
                        } while (i <= 5);
                        Output: 1 2 3 4 5
                        
            
            
            
            Nested Loops:
            ---------------------------
            Loops can be nested within one another to handle 
            multi-dimensional data or complex logic.


                        Example: Printing a multiplication table:
                      
                        for (int i = 1; i <= 5; i++) {
                            for (int j = 1; j <= 5; j++) {
                                printf("%d\t", i * j);
                            }
                            printf("\n");
                        }
            
            
                        Output:
                        Copy code
                        1  2  3  4  5
                        2  4  6  8  10
                        3  6  9  12 15
                        4  8  12 16 20
                        5  10 15 20 25
                        
            
            
            
            Control Statements in Loops:
            ---------------------------
            break:
            -------
            Exits the loop immediately.

            Example:
     
                        for (int i = 1; i <= 5; i++) {
                            if (i == 3) {
                                break;  // Exit the loop
                            }
                            printf("%d ", i);
                        }
                        Output: 1 2
            
            
            
            continue:
            --------------
            Skips the current iteration and proceeds to the next.

            Example:
         

                        for (int i = 1; i <= 5; i++) {
                            if (i == 3) {
                                continue;  // Skip this iteration
                            }
                            printf("%d ", i);
                        }
                        Output: 1 2 4 5
                        
            
            goto:
            -------
            Transfers control to a labeled statement (use with caution; not 
            recommended for structured programming).


            Example:
          
            
                        int i = 1;
                        start:
                        printf("%d ", i);
                        i++;
                        if (i <= 5) {
                            goto start;
                        }
                        Output: 1 2 3 4 5









                        Example Program Combining Condition and Loops
                        -------------------------------------------------
                        
                        
                        Find the sum of all even numbers from 1 to 10:
                        ----------------------------------------------
                        #include <stdio.h>
                        
                        int main() {
                            int sum = 0;
                        
                            for (int i = 1; i <= 10; i++) {
                                if (i % 2 == 0) {  // Condition to check if the number is even
                                    sum += i;      // Add the even number to the sum
                                }
                            }
                        
                            printf("Sum of even numbers from 1 to 10: %d\n", sum);
                            return 0;
                        }
                        Output: Sum of even numbers from 1 to 10: 30
                        





Multiple-Choice Questions (MCQs) and Objective Questions
---------------------------------------------------------


Topics Covered:
            Condition and Loop Concept
            Array, Structure, and Pointer


1. Condition and Loop Concept


MCQs:

Which of the following is NOT a conditional statement in C?
A. if
B. else
C. switch
D. do-while




What is the output of the following code?


int x = 5;  
if (x > 10)  
    printf("Greater\n");  
else  
    printf("Smaller\n");  
A. Greater
B. Smaller
C. Error
D. None of the above




Which loop ensures that the code block executes at least once?
A. for
B. while
C. do-while
D. None of the above




What is the output of this code?

c
Copy code
int i = 1;  
while (i <= 5) {  
    printf("%d ", i);  
    i++;  
}  
A. 1 2 3 4 5
B. 0 1 2 3 4
C. Infinite loop
D. None of the above




What happens when the break statement is encountered in a loop?
A. Terminates the loop immediately
B. Skips the current iteration
C. Transfers control to the start of the loop
D. None of the above




In a for loop, which part is executed only once?
A. Initialization
B. Condition
C. Increment/Decrement
D. None of the above




What is the output of this code?

c
Copy code
int i = 0;  
for (; i < 3; i++) {  
    printf("%d ", i);  
}  
A. 0 1 2
B. 1 2 3
C. 0 1 2 3
D. Infinite loop




What does the continue statement do in a loop?
A. Stops the loop
B. Skips the current iteration
C. Restarts the loop
D. None of the above




Which of the following is true about the switch statement?
A. break is mandatory after each case.
B. It works only with integers and characters.
C. It can check ranges of values.
D. Both B and C are true.




Identify the error in the following code:

c
Copy code
for (int i = 0; i < 5; i--) {  
    printf("%d ", i);  
}  
A. Syntax error
B. Infinite loop
C. Logical error
D. No error



Objective Questions:

True or False: A while loop is guaranteed to execute at least once.
Fill in the blank: A switch statement uses ______ to compare the variable with multiple cases.
True or False: A for loop can have an empty initialization and increment section.
Fill in the blank: The ______ statement is used to exit a loop prematurely.
True or False: The condition in a do-while loop is checked before the block of code executes.







Array, Structure, and Pointer
----------------------------------
MCQs:

Which of the following correctly declares an array in C?
A. int arr[];
B. int arr[10];
C. int arr[10] = {};
D. None of the above




What is the index of the last element in an array of size 5?
A. 4
B. 5
C. 0
D. Undefined




How do you access the third element of an array named arr?
A. arr[3]
B. arr[2]
C. arr(2)
D. None of the above




Which of the following is TRUE about structures in C?
A. A structure can have members of different data types.
B. A structure can only hold integers.
C. Structure members are accessed using pointers only.
D. None of the above




What is the correct syntax to declare a pointer?
A. int p;
B. int *p;
C. int &p;
D. None of the above




What does the & operator do in C?
A. Dereferences a pointer
B. Allocates memory
C. Returns the address of a variable
D. None of the above




What is the output of this code?


int arr[3] = {10, 20, 30};  
int *p = arr;  
printf("%d", *(p + 1));  
A. 10
B. 20
C. 30
D. None of the above




Which of the following is a valid way to access a structure member using a pointer?
A. struct_ptr.member
B. (*struct_ptr).member
C. struct_ptr->member
D. Both B and C




What is the size of an array int arr[5]; in bytes, assuming int is 4 bytes?
A. 5 bytes
B. 10 bytes
C. 20 bytes
D. 40 bytes




How is memory for an array allocated in C?
A. Dynamically during runtime
B. At compile time
C. Both A and B
D. None of the above




Objective Questions:

True or False: An array can hold elements of different data types.
Fill in the blank: Arrays in C are ______ indexed.
True or False: A pointer can store the address of another pointer.
Fill in the blank: A pointer to a structure is declared using the ______ operator.
True or False: Arrays are passed to functions by value.








Answers
Condition and Loop Concept
D

B

C

A

A

A

A

B

B

B

False

case

True

break

False






Array, Structure, and Pointer
B

A

B

A

B

C

B

D

C

B

False

Zero

True

->

False



Array, structure and pointer
+++++++++++++++++++++++++++++++++




****************************************************************************
****************************************************************************
****************************************************************************











****************************************************************************
****************************************************************************
****************************************************************************
Database (15) + Information System (10)
              • Concept of Database and Models
              • Relational Database, Relational Algebra and Normalization.
              • Basic SQL
              • Concept of Distributed Database
              • File and Index
              • Transactional Processing, concurrency control and recovery
              • Software Development Life Cycle
              • Requirement Analysis
              • Software Testing.








****************************************************************************
****************************************************************************
****************************************************************************














****************************************************************************
****************************************************************************
****************************************************************************
Computer Network and Architecture (25)
                  • Communication Media and Network Architecture and OSI and TCP/IP
                  • Network Security and IPv4
                  • Modulation Techniques and Switching Techniques
                  • Boolean Algebra and Fundamental of processor
                  • Memory Organization and I/O Structure 

****************************************************************************
****************************************************************************
****************************************************************************












****************************************************************************
****************************************************************************
****************************************************************************
Concept of Research (25)
                (Research Methodology)
                • Foundation of Research and Problem Identification & Formulation
                • Research Design/Architecture
                • Qualitative and Quantitative Research
                • Data Analysis and Interpretation of Data and Proposal Writing
                • Research Tools


****************************************************************************
****************************************************************************
****************************************************************************
